{"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"],"title":"Articles"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection"],"title":"Protocols"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParserPrinter","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParsePrint"],"title":"Structures"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional"],"title":"Type Aliases"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"],"title":"Enumerations"}],"sections":[],"variants":[{"paths":["\/documentation\/parsing"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"role":"collection","modules":[{"name":"Parsing"}],"roleHeading":"Framework","symbolKind":"module","title":"Parsing","externalID":"Parsing"},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"hierarchy":{"paths":[[]]},"primaryContentSections":[{"content":[{"type":"heading","anchor":"Additional-Resources","level":2,"text":"Additional Resources"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing","type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/www.pointfree.co\/collections\/parsing","type":"reference"}],"type":"paragraph"}]}]},{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Parsing with this library is performed by listing out many small parsers that describe how to"},{"type":"text","text":" "},{"type":"text","text":"incrementally consume small bits from the beginning of an input string. For example, suppose you"},{"type":"text","text":" "},{"type":"text","text":"have a string that holds some user data that you want to parse into an array of "},{"type":"codeVoice","code":"User"},{"type":"text","text":"s:"}]},{"type":"codeListing","syntax":"swift","code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,true","\"\"\"","","struct User {","  var id: Int","  var name: String","  var isAdmin: Bool","}"]},{"type":"paragraph","inlineContent":[{"text":"A parser can be constructed for transforming the input string into an array of users in succinct","type":"text"},{"text":" ","type":"text"},{"text":"and fluent API:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let user = Parse(User.init) {","  Int.parser()","  \",\"","  Prefix { $0 != \",\" }.map(String.init)","  \",\"","  Bool.parser()","}","","let users = Many {","  user","} separator: {","  \"\\n\"","} terminator: {","  End()","}","","try users.parse(input)  \/\/ [User(id: 1, name: \"Blob\", isAdmin: true), ...]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This says that to parse a user we:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Parse and consume an integer from the beginning of the input","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"then a comma"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"then everything up to the next comma"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"then another comma","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"and finally a boolean."}]}]}]},{"type":"paragraph","inlineContent":[{"text":"And to parse an entire array of users we:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Run the ","type":"text"},{"code":"user","type":"codeVoice"},{"text":" parser many times","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"between each invocation of "},{"code":"user","type":"codeVoice"},{"type":"text","text":" we run the separator parser to consume a newline"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"and once the ","type":"text"},{"code":"user","type":"codeVoice"},{"text":" and separator parsers have consumed all they can we run the terminator","type":"text"},{"text":" ","type":"text"},{"text":"parser to verify there is no more input to consume.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Further, if the input is malformed, like say we mistyped one of the booleans, then the parser emits","type":"text"},{"text":" ","type":"text"},{"text":"an error that describes exactly what went wrong:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,tru","\"\"\"","","try users.parse(input)","","\/\/ error: unexpected input","\/\/  --> input:3:11","\/\/ 3 | 3,Blob Jr,tru","\/\/   |           ^ expected \"true\" or \"false\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With a few small changes we can also turn this parser into a "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","isActive":true,"type":"reference"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s the basics of parsing a simple string format, but there are a lot more operators and tricks"},{"type":"text","text":" "},{"type":"text","text":"to learn in order to performantly parse larger inputs."}]}],"kind":"content"}],"seeAlsoSections":[{"abstract":[{"text":"The collection of videos from ","type":"text"},{"identifier":"https:\/\/www.pointfree.co","type":"reference","isActive":true},{"text":" that dive deep into the","type":"text"},{"text":" ","type":"text"},{"text":"development of the Parsing library.","type":"text"}],"identifiers":["https:\/\/www.pointfree.co\/collections\/parsing"],"title":"Related Documentation"}],"kind":"symbol","references":{"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","url":"\/documentation\/parsing\/backtracking","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when"},{"type":"text","text":" "},{"text":"unnecessary.","type":"text"}],"title":"Backtracking"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol","title":"Parser","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"role":"symbol","title":"ParserBuilder","abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"type":"text","text":"runs a number of parsers, one after the other, and accumulates their outputs."}],"kind":"symbol","type":"topic","url":"\/documentation\/parsing\/parserbuilder","navigatorTitle":[{"kind":"identifier","text":"ParserBuilder"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserBuilder"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyConversion","kind":"identifier"}],"url":"\/documentation\/parsing\/anyconversion","type":"topic","title":"AnyConversion","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","kind":"symbol","navigatorTitle":[{"text":"AnyConversion","kind":"identifier"}],"abstract":[{"type":"text","text":"A type-erased "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion"},{"type":"text","text":"."}],"role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","url":"\/documentation\/parsing\/gettingstarted","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn how to integrate Parsing into your project and write your first parser."}],"title":"Getting Started"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParserPrinter":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyParserPrinter"}],"title":"AnyParserPrinter","type":"topic","url":"\/documentation\/parsing\/anyparserprinter","abstract":[{"type":"text","text":"A type-erased parser-printer of "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" from "},{"type":"codeVoice","code":"Input"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyParserPrinter"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParserPrinter","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/CountingRange":{"navigatorTitle":[{"text":"CountingRange","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/parsing\/countingrange","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","title":"CountingRange","abstract":[],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CountingRange","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"url":"\/documentation\/parsing\/parsers","type":"topic","kind":"symbol","title":"Parsers","navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"type":"topic","title":"ParserPrinter","url":"\/documentation\/parsing\/parserprinter","kind":"symbol","abstract":[{"type":"text","text":"A "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","isActive":true},{"type":"text","text":" that can incrementally “print” an output value back into an input."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Design":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","title":"Design","url":"\/documentation\/parsing\/design","role":"article","abstract":[{"text":"Learn how the library is designed, including its use of protocols, result builders and operators.","type":"text"}],"type":"topic","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions":{"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conversions"}],"url":"\/documentation\/parsing\/conversions","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A namespace for types that serve as conversions."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","type":"topic","title":"Conversions","navigatorTitle":[{"kind":"identifier","text":"Conversions"}]},"https://www.pointfree.co/collections/parsing":{"identifier":"https:\/\/www.pointfree.co\/collections\/parsing","title":"Point-Free Videos","titleInlineContent":[{"text":"Point-Free Videos","type":"text"}],"url":"https:\/\/www.pointfree.co\/collections\/parsing","type":"link"},"https://github.com/pointfreeco/swift-parsing":{"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing","title":"GitHub Repo","titleInlineContent":[{"text":"GitHub Repo","type":"text"}],"url":"https:\/\/github.com\/pointfreeco\/swift-parsing","type":"link"},"doc://co.pointfree.Parsing/documentation/Parsing/ParsePrint":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParsePrint","abstract":[{"text":"An entry to ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","isActive":true,"type":"reference"},{"text":" syntax that requires the builder to be a printer.","type":"text"}],"url":"\/documentation\/parsing\/parseprint","navigatorTitle":[{"text":"ParsePrint","kind":"identifier"}],"type":"topic","title":"ParsePrint","role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParsePrint","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion":{"url":"\/documentation\/parsing\/conversion","type":"topic","kind":"symbol","title":"Conversion","navigatorTitle":[{"kind":"identifier","text":"Conversion"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conversion"}],"abstract":[{"text":"Declares a type that can transform an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value ","type":"text"},{"inlineContent":[{"type":"text","text":"and"}],"type":"emphasis"},{"text":" transform an","type":"text"},{"text":" ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value back into an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional","navigatorTitle":[{"text":"Conditional","kind":"identifier"}],"title":"Conditional","url":"\/documentation\/parsing\/conditional","role":"symbol","abstract":[],"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conditional","kind":"identifier"}],"deprecated":true,"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"url":"\/documentation\/parsing","type":"topic","kind":"symbol","title":"Parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/PrependableCollection":{"role":"symbol","abstract":[{"text":"A collection that supports empty initialization and the ability to prepend a sequence of","type":"text"},{"text":" ","type":"text"},{"text":"elements of elements to itself.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"PrependableCollection","kind":"identifier"}],"url":"\/documentation\/parsing\/prependablecollection","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrependableCollection","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection","title":"PrependableCollection"},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","url":"\/documentation\/parsing\/stringabstractions","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"text":"trade performance for correctness where needed.","type":"text"}],"title":"String Abstractions"},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","url":"\/documentation\/parsing\/errormessages","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn how the library reports parsing errors and how to integrate your own custom error messages"},{"type":"text","text":" "},{"text":"into parsers.","type":"text"}],"title":"Error Messages"},"https://github.com/pointfreeco/swift-parsing/discussions":{"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","title":"Discussions","type":"link","titleInlineContent":[{"text":"Discussions","type":"text"}],"url":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions"}}}