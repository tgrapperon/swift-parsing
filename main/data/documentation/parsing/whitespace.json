{"seeAlsoSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Digits","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/String","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CaseIterable","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/From","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Consumed","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream"],"title":"Common parsers","generated":true}],"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"abstract":[{"type":"text","text":"A parser that consumes whitespace from the beginning of input."}],"kind":"symbol","relationshipsSections":[{"kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"],"title":"Conforms To"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Whitespace","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Length","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Length","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"CountingRange","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing13CountingRangeP"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Conversion","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing10ConversionP"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Collection","preciseIdentifier":"s:Sl","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Collection","preciseIdentifier":"s:Sl","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"UTF8","preciseIdentifier":"s:s4UTF8a","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"CodeUnit","preciseIdentifier":"s:s7UnicodeO4UTF8O8CodeUnita","kind":"typeIdentifier"}],"platforms":["Linux"],"languages":["swift"]}]}],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:)-5mvhf","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:)-7y3zp","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:)-hfmk","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:_:)-2i1mj","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:_:)-47o7f","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:_:)-6vmf6"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/configuration-swift.property"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/parse(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/Configuration-swift.enum"],"title":"Enumerations"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/Parser-Implementations","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/ParserPrinter-Implementations"],"title":"Default Implementations","generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/whitespace"]}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Whitespace"}],"externalID":"s:7Parsing10WhitespaceV","role":"symbol","roleHeading":"Structure","navigatorTitle":[{"kind":"identifier","text":"Whitespace"}],"title":"Whitespace","symbolKind":"struct","modules":[{"name":"Parsing"}]},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Stream":{"title":"Stream","kind":"symbol","type":"topic","role":"symbol","abstract":[{"text":"A parser that can parse streams of input.","type":"text"}],"navigatorTitle":[{"text":"Stream","kind":"identifier"}],"url":"\/documentation\/parsing\/stream","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Stream","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/parse(_:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/parse(_:)","title":"parse(_:)","type":"topic","url":"\/documentation\/parsing\/whitespace\/parse(_:)","role":"symbol","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/ParserPrinter-Implementations":{"abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/ParserPrinter-Implementations","kind":"article","role":"collectionGroup","type":"topic","title":"ParserPrinter Implementations","url":"\/documentation\/parsing\/whitespace\/parserprinter-implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/init(_:_:)-47o7f":{"type":"topic","abstract":[],"kind":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Length","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"CountingRange","type":"codeVoice"},{"text":", ","type":"text"},{"code":"InputToBytes","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Conversion","type":"codeVoice"},{"text":", ","type":"text"},{"code":"InputToBytes.Input","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":", ","type":"text"},{"code":"InputToBytes.Input","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"InputToBytes.Input.SubSequence","type":"codeVoice"},{"text":", ","type":"text"},{"code":"InputToBytes.Output","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":", ","type":"text"},{"code":"InputToBytes.Output","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"InputToBytes.Output.SubSequence","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"InputToBytes.Output.Element","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"UTF8.CodeUnit","type":"codeVoice"},{"text":".","type":"text"}]},"title":"init(_:_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:_:)-47o7f","fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Length","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Whitespace","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing10WhitespaceV"},{"text":"<","kind":"text"},{"text":"Length","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"Configuration","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing10WhitespaceV13ConfigurationO"},{"text":")","kind":"text"}],"url":"\/documentation\/parsing\/whitespace\/init(_:_:)-47o7f","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/CaseIterable":{"role":"article","url":"\/documentation\/parsing\/caseiterable","abstract":[{"type":"text","text":"A parser-printer that consumes a case-iterable, raw representable value from the beginning of a"},{"type":"text","text":" "},{"type":"text","text":"string."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CaseIterable","kind":"article","type":"topic","title":"CaseIterable"},"doc://co.pointfree.Parsing/documentation/Parsing/Int":{"title":"Int","kind":"article","type":"topic","role":"article","abstract":[{"text":"A parser that consumes an integer from the beginning of a string.","type":"text"}],"url":"\/documentation\/parsing\/int","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int"},"doc://co.pointfree.Parsing/documentation/Parsing/Lazy/parse(_:)":{"title":"parse(_:)","kind":"symbol","type":"topic","role":"symbol","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"type":"codeVoice","code":"Parser"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"url":"\/documentation\/parsing\/lazy\/parse(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LazyParser","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"LazyParser","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Output"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Rest":{"title":"Rest","kind":"symbol","type":"topic","role":"symbol","abstract":[{"text":"A parser that consumes everything to the end of the collection and returns this subsequence as","type":"text"},{"text":" ","type":"text"},{"text":"its output.","type":"text"}],"navigatorTitle":[{"text":"Rest","kind":"identifier"}],"url":"\/documentation\/parsing\/rest","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Rest","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest"},"doc://co.pointfree.Parsing/documentation/Parsing/String":{"title":"String","kind":"article","type":"topic","role":"article","abstract":[{"text":"A parser that consumes a string literal from the beginning of a string.","type":"text"}],"url":"\/documentation\/parsing\/string","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/String"},"doc://co.pointfree.Parsing/documentation/Parsing/Always":{"title":"Always","kind":"symbol","type":"topic","role":"symbol","abstract":[{"text":"A parser that always succeeds with the given value, and does not consume any input.","type":"text"}],"navigatorTitle":[{"text":"Always","kind":"identifier"}],"url":"\/documentation\/parsing\/always","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Always","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always"},"doc://co.pointfree.Parsing/documentation/Parsing/CountingRange":{"navigatorTitle":[{"text":"CountingRange","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/parsing\/countingrange","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","title":"CountingRange","abstract":[],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CountingRange","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Peek":{"title":"Peek","kind":"symbol","type":"topic","role":"symbol","abstract":[{"text":"A parser that runs the given parser, but does not consume any input.","type":"text"}],"navigatorTitle":[{"text":"Peek","kind":"identifier"}],"url":"\/documentation\/parsing\/peek","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Peek","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/init(_:)-7y3zp":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:)-7y3zp","type":"topic","url":"\/documentation\/parsing\/whitespace\/init(_:)-7y3zp","conformance":{"constraints":[{"type":"codeVoice","code":"Length"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"CountingRange"},{"text":", ","type":"text"},{"type":"codeVoice","code":"InputToBytes"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Conversion"},{"text":", ","type":"text"},{"type":"codeVoice","code":"InputToBytes.Input"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Collection"},{"text":", ","type":"text"},{"type":"codeVoice","code":"InputToBytes.Input"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"InputToBytes.Input.SubSequence"},{"text":", ","type":"text"},{"type":"codeVoice","code":"InputToBytes.Output"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Collection"},{"text":", ","type":"text"},{"type":"codeVoice","code":"InputToBytes.Output"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"InputToBytes.Output.SubSequence"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"InputToBytes.Output.Element"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"UTF8.CodeUnit"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Whitespace","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing10WhitespaceV"},{"text":"<","kind":"text"},{"text":"Length","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Configuration","preciseIdentifier":"s:7Parsing10WhitespaceV13ConfigurationO"},{"kind":"text","text":")"}],"title":"init(_:)","kind":"symbol","abstract":[],"role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","title":"OneOf","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}],"url":"\/documentation\/parsing\/oneof","type":"topic","role":"symbol","navigatorTitle":[{"text":"OneOf","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/UUID":{"title":"UUID","kind":"article","type":"topic","role":"article","abstract":[{"text":"A parser that consumes a ","type":"text"},{"code":"UUID","type":"codeVoice"},{"text":" value from the beginning of a string.","type":"text"}],"url":"\/documentation\/parsing\/uuid","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID"},"doc://co.pointfree.Parsing/documentation/Parsing/Prefix":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Prefix"}],"url":"\/documentation\/parsing\/prefix","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A parser that consumes a subsequence from the beginning of its input."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","type":"topic","title":"Prefix","navigatorTitle":[{"kind":"identifier","text":"Prefix"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/init(_:)-5mvhf":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:)-5mvhf","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Length"},{"type":"text","text":" conforms to "},{"code":"CountingRange","type":"codeVoice"},{"type":"text","text":" and "},{"code":"InputToBytes","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Conversions.Identity<Substring.UTF8View>","type":"codeVoice"},{"type":"text","text":"."}]},"url":"\/documentation\/parsing\/whitespace\/init(_:)-5mvhf","abstract":[],"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Whitespace","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing10WhitespaceV"},{"text":"<","kind":"text"},{"text":"Length","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"Configuration","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing10WhitespaceV13ConfigurationO"},{"text":")","kind":"text"}],"role":"symbol","type":"topic","title":"init(_:)","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixThrough":{"title":"PrefixThrough","kind":"symbol","type":"topic","role":"symbol","abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input through a given sequence of","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}],"navigatorTitle":[{"text":"PrefixThrough","kind":"identifier"}],"url":"\/documentation\/parsing\/prefixthrough","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrefixThrough","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/init(_:)-hfmk":{"type":"topic","abstract":[],"kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Length"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"CountingRange"},{"type":"text","text":" and "},{"type":"codeVoice","code":"InputToBytes"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Conversions.SubstringToUTF8View"},{"type":"text","text":"."}]},"title":"init(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:)-hfmk","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"Whitespace","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing10WhitespaceV"},{"text":"<","kind":"text"},{"text":"Length","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"Configuration","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing10WhitespaceV13ConfigurationO"},{"text":")","kind":"text"}],"url":"\/documentation\/parsing\/whitespace\/init(_:)-hfmk","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/Configuration-swift.enum":{"kind":"symbol","navigatorTitle":[{"text":"Configuration","kind":"identifier"}],"type":"topic","url":"\/documentation\/parsing\/whitespace\/configuration-swift.enum","title":"Whitespace.Configuration","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/Configuration-swift.enum","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Configuration","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion":{"url":"\/documentation\/parsing\/conversion","type":"topic","kind":"symbol","title":"Conversion","navigatorTitle":[{"kind":"identifier","text":"Conversion"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conversion"}],"abstract":[{"text":"Declares a type that can transform an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value ","type":"text"},{"inlineContent":[{"type":"text","text":"and"}],"type":"emphasis"},{"text":" transform an","type":"text"},{"text":" ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value back into an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/configuration-swift.property":{"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"configuration"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Whitespace","preciseIdentifier":"s:7Parsing10WhitespaceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Length"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"InputToBytes"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Configuration","preciseIdentifier":"s:7Parsing10WhitespaceV13ConfigurationO"}],"abstract":[],"type":"topic","title":"configuration","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/configuration-swift.property","url":"\/documentation\/parsing\/whitespace\/configuration-swift.property","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"url":"\/documentation\/parsing","type":"topic","kind":"symbol","title":"Parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/Parser-Implementations":{"url":"\/documentation\/parsing\/whitespace\/parser-implementations","type":"topic","kind":"article","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/Parser-Implementations","title":"Parser Implementations","role":"collectionGroup"},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring":{"title":"FromSubstring","kind":"symbol","type":"topic","role":"symbol","abstract":[],"navigatorTitle":[{"text":"FromSubstring","kind":"identifier"}],"url":"\/documentation\/parsing\/fromsubstring","deprecated":true,"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromSubstring"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol","title":"Parser","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/init(_:_:)-2i1mj":{"title":"init(_:_:)","url":"\/documentation\/parsing\/whitespace\/init(_:_:)-2i1mj","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Length"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing10WhitespaceV","text":"Whitespace"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Length"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"InputToBytes"},{"text":">.","kind":"text"},{"preciseIdentifier":"s:7Parsing10WhitespaceV13ConfigurationO","text":"Configuration","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[],"role":"symbol","conformance":{"constraints":[{"code":"Length","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"CountingRange"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"InputToBytes"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Conversions.Identity<Substring.UTF8View>"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:_:)-2i1mj","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixUpTo":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo","kind":"symbol","title":"PrefixUpTo","url":"\/documentation\/parsing\/prefixupto","role":"symbol","abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input up to a given sequence of","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}],"navigatorTitle":[{"text":"PrefixUpTo","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrefixUpTo","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Many":{"role":"symbol","title":"Many","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Many","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","kind":"symbol","navigatorTitle":[{"text":"Many","kind":"identifier"}],"url":"\/documentation\/parsing\/many","abstract":[{"type":"text","text":"A parser that attempts to run another parser as many times as specified, accumulating the result"},{"type":"text","text":" "},{"type":"text","text":"of the outputs."}],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/init(_:_:)-6vmf6":{"type":"topic","abstract":[],"role":"symbol","title":"init(_:_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:_:)-6vmf6","kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Length"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"CountingRange"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"InputToBytes"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Conversions.SubstringToUTF8View"},{"type":"text","text":"."}]},"url":"\/documentation\/parsing\/whitespace\/init(_:_:)-6vmf6","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"Length","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Whitespace","preciseIdentifier":"s:7Parsing10WhitespaceV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Length","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"kind":"text","text":">."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing10WhitespaceV13ConfigurationO","text":"Configuration"},{"kind":"text","text":")"}]},"doc://co.pointfree.Parsing/documentation/Parsing/FromUTF8View":{"title":"FromUTF8View","kind":"symbol","type":"topic","role":"symbol","abstract":[],"navigatorTitle":[{"text":"FromUTF8View","kind":"identifier"}],"url":"\/documentation\/parsing\/fromutf8view","deprecated":true,"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromUTF8View"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View"},"doc://co.pointfree.Parsing/documentation/Parsing/Not":{"title":"Not","kind":"symbol","type":"topic","role":"symbol","abstract":[{"text":"A parser that succeeds if the given parser fails, and does not consume any input.","type":"text"}],"navigatorTitle":[{"text":"Not","kind":"identifier"}],"url":"\/documentation\/parsing\/not","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Not","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not"},"doc://co.pointfree.Parsing/documentation/Parsing/From":{"title":"From","abstract":[],"type":"topic","url":"\/documentation\/parsing\/from","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"From","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/From","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"From","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/First":{"url":"\/documentation\/parsing\/first","type":"topic","kind":"symbol","title":"First","navigatorTitle":[{"kind":"identifier","text":"First"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"First"}],"abstract":[{"text":"A parser that consumes the first element from a collection.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/FromUnicodeScalarView":{"title":"FromUnicodeScalarView","kind":"symbol","type":"topic","role":"symbol","abstract":[],"navigatorTitle":[{"text":"FromUnicodeScalarView","kind":"identifier"}],"url":"\/documentation\/parsing\/fromunicodescalarview","deprecated":true,"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromUnicodeScalarView"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView"},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"url":"\/documentation\/parsing\/parse","title":"Parse","role":"symbol","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers to accumulate their outputs."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parse"}],"navigatorTitle":[{"kind":"identifier","text":"Parse"}],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Lazy":{"title":"Lazy","kind":"symbol","type":"topic","role":"symbol","abstract":[{"text":"A parser that waits for a call to its ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)"},{"text":" method before running the given closure to","type":"text"},{"text":" ","type":"text"},{"text":"create a parser for the given input.","type":"text"}],"navigatorTitle":[{"text":"Lazy","kind":"identifier"}],"url":"\/documentation\/parsing\/lazy","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Lazy","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser":{"role":"symbol","url":"\/documentation\/parsing\/anyparser","abstract":[{"text":"A type-erased parser of ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" from ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","title":"AnyParser","navigatorTitle":[{"text":"AnyParser","kind":"identifier"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyParser","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace":{"navigatorTitle":[{"text":"Whitespace","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","url":"\/documentation\/parsing\/whitespace","abstract":[{"text":"A parser that consumes whitespace from the beginning of input.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Whitespace","kind":"identifier"}],"title":"Whitespace","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Float":{"title":"Float","kind":"article","type":"topic","role":"article","abstract":[{"text":"A parser that consumes a floating-point number from the beginning of a string.","type":"text"}],"url":"\/documentation\/parsing\/float","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float"},"doc://co.pointfree.Parsing/documentation/Parsing/Digits":{"title":"Digits","kind":"symbol","type":"topic","role":"symbol","abstract":[{"text":"A parser that consumes a number of digits from the beginning of a collection of UTF-8 code","type":"text"},{"text":" ","type":"text"},{"text":"units.","type":"text"}],"navigatorTitle":[{"text":"Digits","kind":"identifier"}],"url":"\/documentation\/parsing\/digits","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Digits","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Digits"},"doc://co.pointfree.Parsing/documentation/Parsing/Bool":{"title":"Bool","kind":"article","type":"topic","role":"article","abstract":[{"text":"A parser that consumes a Boolean value from the beginning of a string.","type":"text"}],"url":"\/documentation\/parsing\/bool","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool"},"doc://co.pointfree.Parsing/documentation/Parsing/End":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"End"}],"navigatorTitle":[{"kind":"identifier","text":"End"}],"type":"topic","title":"End","url":"\/documentation\/parsing\/end","kind":"symbol","abstract":[{"type":"text","text":"A parser that succeeds if the input is empty, and fails otherwise."}]},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","abstract":[{"type":"text","text":"A parser that parses a sequence of elements from its input."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"StartsWith"}],"title":"StartsWith","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StartsWith"}],"url":"\/documentation\/parsing\/startswith"},"doc://co.pointfree.Parsing/documentation/Parsing/Consumed":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Consumed","kind":"identifier"}],"role":"symbol","url":"\/documentation\/parsing\/consumed","abstract":[{"type":"text","text":"A parser that returns the subsequence of input consumed by another parser."}],"navigatorTitle":[{"text":"Consumed","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Consumed","kind":"symbol","type":"topic","title":"Consumed"},"doc://co.pointfree.Parsing/documentation/Parsing/Optionally":{"title":"Optionally","kind":"symbol","type":"topic","role":"symbol","abstract":[{"text":"A parser that runs the given parser and succeeds with ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if it fails.","type":"text"}],"navigatorTitle":[{"text":"Optionally","kind":"identifier"}],"url":"\/documentation\/parsing\/optionally","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Optionally","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally"},"doc://co.pointfree.Parsing/documentation/Parsing/Fail":{"title":"Fail","kind":"symbol","type":"topic","role":"symbol","abstract":[{"text":"A parser that always fails, no matter the input.","type":"text"}],"navigatorTitle":[{"text":"Fail","kind":"identifier"}],"url":"\/documentation\/parsing\/fail","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Fail","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail"},"doc://co.pointfree.Parsing/documentation/Parsing/Skip":{"abstract":[{"type":"text","text":"A parser that discards the output of another parser."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","title":"Skip","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Skip"}],"url":"\/documentation\/parsing\/skip","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Skip"}]},"doc://co.pointfree.Parsing/documentation/Parsing/CharacterSet":{"title":"CharacterSet","kind":"article","type":"topic","role":"article","abstract":[{"text":"A parser that consumes the characters contained in a ","type":"text"},{"code":"CharacterSet","type":"codeVoice"},{"text":" from the beginning of a string.","type":"text"}],"url":"\/documentation\/parsing\/characterset","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline":{"kind":"symbol","url":"\/documentation\/parsing\/newline","abstract":[],"title":"Newline","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Newline","kind":"identifier"}],"navigatorTitle":[{"text":"Newline","kind":"identifier"}],"role":"symbol","deprecated":true,"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"title":"ParserPrinter","role":"symbol","kind":"symbol","url":"\/documentation\/parsing\/parserprinter","type":"topic","abstract":[{"type":"text","text":"A "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"type":"text","text":" that can incrementally “print” an output value back into an input."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Length"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"CountingRange"},{"text":", ","type":"text"},{"type":"codeVoice","code":"InputToBytes"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Conversion"},{"text":", ","type":"text"},{"type":"codeVoice","code":"InputToBytes.Input"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"PrependableCollection"},{"text":", ","type":"text"},{"type":"codeVoice","code":"InputToBytes.Input"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"InputToBytes.Input.SubSequence"},{"text":", ","type":"text"},{"type":"codeVoice","code":"InputToBytes.Output"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"PrependableCollection"},{"text":", ","type":"text"},{"type":"codeVoice","code":"InputToBytes.Output"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"InputToBytes.Output.SubSequence"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"InputToBytes.Output.Element"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"UTF8.CodeUnit"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}}}}