{"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parsers\/conditional"]}],"kind":"symbol","topicSections":[{"title":"Enumeration Cases","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional\/first(_:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional\/second(_:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional\/parse(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional\/Parser-Implementations","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional\/ParserPrinter-Implementations"],"generated":true}],"metadata":{"symbolKind":"enum","navigatorTitle":[{"kind":"identifier","text":"Conditional"}],"title":"Parsers.Conditional","roleHeading":"Enumeration","modules":[{"name":"Parsing"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conditional"}],"extendedModule":"Parsing","role":"symbol","externalID":"s:7Parsing7ParsersO11ConditionalO"},"relationshipsSections":[{"kind":"relationships","title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"]]},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"Conditional","kind":"identifier"},{"text":"<","kind":"text"},{"text":"First","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Second","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"First","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","text":"Parser","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserP"},{"text":", ","kind":"text"},{"text":"Second","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","text":"Parser","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserP"},{"text":", ","kind":"text"},{"text":"First","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Second","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"First","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Second","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"This parser is useful for situations where you want to run one of two different parsers based on","type":"text"},{"text":" ","type":"text"},{"text":"a condition, which typically would force you to perform ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/eraseToAnyParser()"},{"text":" and incur","type":"text"},{"text":" ","type":"text"},{"text":"a performance penalty.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, you can use this parser in a "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/flatMap(_:)","isActive":true},{"type":"text","text":" operation to use the parsed"},{"type":"text","text":" "},{"type":"text","text":"output to determine what parser to run next:"}]},{"syntax":"swift","type":"codeListing","code":["versionParser.flatMap { version in","  version == \"2.0\"","    ? Conditional.first(V2Parser())","    : Conditional.second(LegacyParser())","}"]},{"type":"paragraph","inlineContent":[{"text":"You won’t typically construct this parser directly, but instead will use standard ","type":"text"},{"code":"if","type":"codeVoice"},{"text":"-","type":"text"},{"code":"else","type":"codeVoice"},{"text":" ","type":"text"},{"text":"statements in a parser builder to automatically build conditional parsers:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["versionParser.flatMap { version in","  if version == \"2.0\" {","    V2Parser()","  } else {","    LegacyParser()","  }","}"]}]}],"abstract":[{"type":"text","text":"A parser that can parse output from two types of parsers."}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Conditional":{"role":"symbol","kind":"symbol","title":"Parsers.Conditional","abstract":[{"type":"text","text":"A parser that can parse output from two types of parsers."}],"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conditional"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional","url":"\/documentation\/parsing\/parsers\/conditional","navigatorTitle":[{"kind":"identifier","text":"Conditional"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"url":"\/documentation\/parsing","type":"topic","kind":"symbol","title":"Parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/flatMap(_:)":{"url":"\/documentation\/parsing\/parser\/flatmap(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"flatMap"},{"kind":"text","text":"<"},{"text":"NewParser","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewParser","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO7FlatMapV","text":"FlatMap","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"NewParser","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"flatMap(_:)","abstract":[{"text":"Returns a parser that transforms the output of this parser into a new parser.","type":"text"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/flatMap(_:)","type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","url":"\/documentation\/parsing\/parserprinter","title":"ParserPrinter","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"conformance":{"constraints":[{"code":"First","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"ParserPrinter","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Second","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"ParserPrinter","type":"codeVoice"},{"type":"text","text":", "},{"code":"First.Input","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Second.Input","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"First.Output","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Second.Output","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"abstract":[{"type":"text","text":"A "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","isActive":true},{"type":"text","text":" that can incrementally “print” an output value back into an input."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Conditional/Parser-Implementations":{"abstract":[],"kind":"article","type":"topic","title":"Parser Implementations","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional\/Parser-Implementations","url":"\/documentation\/parsing\/parsers\/conditional\/parser-implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Conditional/parse(_:)":{"abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional\/parse(_:)","title":"parse(_:)","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"First","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"First"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"url":"\/documentation\/parsing\/parsers\/conditional\/parse(_:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol","title":"Parser","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"url":"\/documentation\/parsing\/parsers","type":"topic","kind":"symbol","title":"Parsers","navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Conditional/second(_:)":{"url":"\/documentation\/parsing\/parsers\/conditional\/second(_:)","role":"symbol","type":"topic","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"second","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Second","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"Parsers.Conditional.second(_:)","kind":"symbol","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional\/second(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Conditional/ParserPrinter-Implementations":{"url":"\/documentation\/parsing\/parsers\/conditional\/parserprinter-implementations","title":"ParserPrinter Implementations","role":"collectionGroup","type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional\/ParserPrinter-Implementations","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Conditional/first(_:)":{"title":"Parsers.Conditional.first(_:)","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional\/first(_:)","url":"\/documentation\/parsing\/parsers\/conditional\/first(_:)","abstract":[],"kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"first"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":")"}],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/eraseToAnyParser()":{"title":"eraseToAnyParser()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"eraseToAnyParser"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"AnyParser","preciseIdentifier":"s:7Parsing9AnyParserV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":">"}],"kind":"symbol","abstract":[{"text":"Wraps this parser with a type eraser.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/eraseToAnyParser()","role":"symbol","url":"\/documentation\/parsing\/parser\/erasetoanyparser()"}}}