{"seeAlsoSections":[{"title":"Articles","generated":true,"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages"]}],"abstract":[{"text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when","type":"text"},{"text":" ","type":"text"},{"text":"unnecessary.","type":"text"}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","interfaceLanguage":"swift"},"sections":[],"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Backtracking is the process of restoring an input to its original value when parsing fails. While it","type":"text"},{"text":" ","type":"text"},{"text":"can be very useful, backtracking can lead to more complicated parser logic than necessary, and","type":"text"},{"text":" ","type":"text"},{"text":"backtracking too often can lead to performance issues. For this reason, most parsers are not","type":"text"},{"text":" ","type":"text"},{"text":"required to backtrack, and can therefore fail ","type":"text"},{"inlineContent":[{"type":"text","text":"and"}],"type":"emphasis"},{"text":" still consume from the input.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The primary way to make use of backtracking in your parsers is through the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},{"type":"text","text":" parser, which"},{"type":"text","text":" "},{"type":"text","text":"tries many parsers on an input and chooses the first that succeeds. This allows you to try many"},{"type":"text","text":" "},{"type":"text","text":"parsers on the same input, regardless of how much each parser consumes:"}]},{"type":"codeListing","code":["enum Currency { case eur, gbp, usd }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}"],"syntax":"swift"},{"level":2,"type":"heading","text":"When to backtrack in your parsers?","anchor":"When-to-backtrack-in-your-parsers"},{"type":"paragraph","inlineContent":[{"text":"If you only use the parsers and operators that ship with this library, and in particular you do not","type":"text"},{"text":" ","type":"text"},{"text":"create custom conformances to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"reference"},{"text":" protocol, then you never need to worry about explicitly","type":"text"},{"text":" ","type":"text"},{"text":"backtracking your input because it will be handled for you automatically. The primary way to allow","type":"text"},{"text":" ","type":"text"},{"text":"for backtracking is via the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","type":"reference"},{"text":" parser, but there are a few other parsers that also backtrack","type":"text"},{"text":" ","type":"text"},{"text":"internally.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One such example is the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally"},{"type":"text","text":" parser, which transforms any parser into one that cannot fail"},{"type":"text","text":" "},{"type":"text","text":"by catching any thrown errors and returning "},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"type":"codeListing","code":["let parser = Parse {","  \"Hello,\"","  Optionally { \" \"; Bool.parser() }","  \" world!\"","}","","try parser.parse(\"Hello, world!\")      \/\/ nil","try parser.parse(\"Hello, true world!\") \/\/ true"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If the parser captured inside ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","type":"reference"},{"text":" fails then it backtracks the input to its state before","type":"text"},{"text":" ","type":"text"},{"text":"the parser ran. In particular, if the ","type":"text"},{"code":"Bool.parser()","type":"codeVoice"},{"text":" fails then it will make sure to undo","type":"text"},{"text":" ","type":"text"},{"text":"consuming the leading space “ “ so that later parsers can try.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another example of a parser that internally backtracks is the "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/replaceError(with:)","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator, which coalesces any error thrown by a parser into a default output value:"}]},{"type":"codeListing","code":["let parser = Parse {","  \"Hello,\"","  Optionally { \" \"; Bool.parser() }","    .replaceError(with: false)","  \" world!\"","}","","try parser.parse(\"Hello, world!\")      \/\/ false","try parser.parse(\"Hello, true world!\") \/\/ true"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"It backtracks the input to its original value when the parser fails so that later parsers can try.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The only time you need to worry about explicitly backtracking input is when making your own","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","isActive":true,"type":"reference"},{"text":" conformances. As a general rule of thumb, if your parser recovers from all failures","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"code":"parse","type":"codeVoice"},{"text":" method then it should backtrack the input to its state before the error was thrown.","type":"text"},{"text":" ","type":"text"},{"text":"This is exactly how ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/replaceError(with:)","isActive":true,"type":"reference"},{"text":" work.","type":"text"}]},{"level":2,"type":"heading","text":"Performance","anchor":"Performance"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If used naively, backtracking can lead to less performant parsing code. For example, if we wanted to"},{"type":"text","text":" "},{"type":"text","text":"parse two integers from a string that were separated by either a dash “-” or slash “\/”, then we"},{"type":"text","text":" "},{"type":"text","text":"could write this as:"}]},{"type":"codeListing","code":["OneOf {","  Parse { Int.parser(); \"-\"; Int.parser() } \/\/ 1️⃣","  Parse { Int.parser(); \"\/\"; Int.parser() } \/\/ 2️⃣","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, parsing slash-separated integers is not going to be performant because it will first run"},{"type":"text","text":" "},{"type":"text","text":"the entire 1️⃣ parser until it fails, then backtrack to the beginning, and run the 2️⃣ parser. In"},{"type":"text","text":" "},{"type":"text","text":"particular, the first integer will get parsed twice, unnecessarily repeating that work."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"On the  other hand, we can factor out the common work of the parser and localize the backtracking"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},{"type":"text","text":" work to make a much more performant parser:"}]},{"type":"codeListing","code":["Parse {","  Int.parser()","  OneOf { \"-\"; \"\/\" }","  Int.parser()","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"We can even write a benchmark to measure the performance difference:","type":"text"}]},{"type":"codeListing","code":["let first = OneOf {","  Parse { Int.parser(); \"-\"; Int.parser() }","  Parse { Int.parser(); \"\/\"; Int.parser() }","}","benchmark(\"First\") {","  precondition(try! first.parse(\"100\/200\") == (100, 200))","}","let second = Parse {","  Int.parser()","  OneOf { \"-\"; \"\/\" }","  Int.parser()","}","benchmark(\"Second\") {","  precondition(try! second.parse(\"100\/200\") == (100, 200))","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Running this produces the following results:","type":"text"}]},{"type":"codeListing","code":["name   time        std        iterations","----------------------------------------","First  1500.000 ns ±  19.75 %     856753","Second  917.000 ns ±  15.89 %    1000000"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second parser takes only 60% of the time to run that the first parser does."}]}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"],["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"kind":"article","metadata":{"roleHeading":"Article","title":"Backtracking","modules":[{"name":"Parsing"}],"role":"article"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/backtracking"]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"url":"\/documentation\/parsing","type":"topic","kind":"symbol","title":"Parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","url":"\/documentation\/parsing\/errormessages","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn how the library reports parsing errors and how to integrate your own custom error messages"},{"type":"text","text":" "},{"text":"into parsers.","type":"text"}],"title":"Error Messages"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/replaceError(with:)":{"type":"topic","url":"\/documentation\/parsing\/parser\/replaceerror(with:)","abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ReplaceError","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/replaceError(with:)","title":"replaceError(with:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","title":"OneOf","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}],"url":"\/documentation\/parsing\/oneof","type":"topic","role":"symbol","navigatorTitle":[{"text":"OneOf","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol","title":"Parser","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Optionally":{"title":"Optionally","kind":"symbol","type":"topic","role":"symbol","abstract":[{"text":"A parser that runs the given parser and succeeds with ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if it fails.","type":"text"}],"navigatorTitle":[{"text":"Optionally","kind":"identifier"}],"url":"\/documentation\/parsing\/optionally","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Optionally","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally"},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","url":"\/documentation\/parsing\/stringabstractions","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"text":"trade performance for correctness where needed.","type":"text"}],"title":"String Abstractions"},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","url":"\/documentation\/parsing\/gettingstarted","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn how to integrate Parsing into your project and write your first parser."}],"title":"Getting Started"},"doc://co.pointfree.Parsing/documentation/Parsing/Design":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","title":"Design","url":"\/documentation\/parsing\/design","role":"article","abstract":[{"text":"Learn how the library is designed, including its use of protocols, result builders and operators.","type":"text"}],"type":"topic","kind":"article"}}}