{"primaryContentSections":[{"content":[{"anchor":"Protocol","type":"heading","level":2,"text":"Protocol"},{"inlineContent":[{"type":"text","text":"The design of the library is largely inspired by the Swift standard library and Apple’s Combine"},{"type":"text","text":" "},{"type":"text","text":"framework. A parser is represented as a protocol that many types conform to, and then parser"},{"type":"text","text":" "},{"type":"text","text":"transformations (also known as “combinators”) are methods that return concrete types conforming to"},{"type":"text","text":" "},{"type":"text","text":"the parser protocol."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, to parse all the characters from the beginning of a substring until you encounter a"},{"type":"text","text":" "},{"type":"text","text":"comma you can use the "},{"type":"codeVoice","code":"Prefix"},{"type":"text","text":" parser:"}],"type":"paragraph"},{"type":"codeListing","code":["let parser = Prefix { $0 != \",\" }","","var input = \"Hello,World\"[...]","try parser.parse(&input)  \/\/ \"Hello\"","input                     \/\/ \",World\""],"syntax":"swift"},{"inlineContent":[{"text":"The type of this parser is:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["Prefix<Substring>"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"We can "},{"code":".map","type":"codeVoice"},{"type":"text","text":" on this parser in order to transform its output, which in this case is the string"},{"text":" ","type":"text"},{"text":"“Hello”:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let parser = Prefix { $0 != \",\" }",".map { $0 + \"!!!\" }","","var input = \"Hello,World\"[...]","try parser.parse(&input)  \/\/ \"Hello!!!\"","input                     \/\/ \",World\""],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The type of this parser is now:"}],"type":"paragraph"},{"type":"codeListing","code":["Parsers.Map<Prefix<Substring>, Substring>"],"syntax":"swift"},{"inlineContent":[{"text":"Notice that the type of the parser encodes the operations that we performed. This adds a bit of","type":"text"},{"text":" ","type":"text"},{"text":"complexity when using these types, but comes with some performance benefits because Swift can","type":"text"},{"text":" ","type":"text"},{"text":"usually inline and optimize away the creation of those nested types.","type":"text"}],"type":"paragraph"},{"anchor":"Result-Builders","type":"heading","level":2,"text":"Result Builders"},{"inlineContent":[{"text":"The library takes advantage of Swift’s ","type":"text"},{"code":"@resultBuilder","type":"codeVoice"},{"text":" feature to make constructing complex parsers","type":"text"},{"text":" ","type":"text"},{"text":"as fluent as possible, and should be reminiscent of how views are constructed in SwiftUI. The main","type":"text"},{"text":" ","type":"text"},{"text":"entry point into building a parser is the ","type":"text"},{"code":"Parse","type":"codeVoice"},{"text":" builder:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["Parse {","","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"In this builder block you can specify parsers that will be run one after another. For example, if"},{"type":"text","text":" "},{"type":"text","text":"you wanted to parse an integer, then a comma, and then a boolean from a string, you can simply do:"}],"type":"paragraph"},{"type":"codeListing","code":["Parse {","  Int.parser()","  \",\"","  Bool.parser()","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Note that the "},{"code":"String","type":"codeVoice"},{"type":"text","text":" type conforms to the "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"reference","isActive":true},{"type":"text","text":" protocol, and represents a parser that"},{"type":"text","text":" "},{"type":"text","text":"consumes that exact string from the beginning of an input if it matches, and otherwise fails."}],"type":"paragraph"},{"inlineContent":[{"text":"Many of the parsers and operators that come with the library are configured with parser builders","type":"text"},{"text":" ","type":"text"},{"text":"to maximize readability of the parsers. For example, to parse accounting syntax of numbers, where","type":"text"},{"text":" ","type":"text"},{"text":"parenthesized numbers are negative, we can use the ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","type":"reference","isActive":true},{"text":" parser builder:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let accountingNumber = OneOf {","  Digits()","","  Parse {","    \"(\"; Digits(); \")\"","  }","  .map { -$0 }","}","","try accountingNumber.parse(\"100\")    \/\/ 100","try accountingNumber.parse(\"(100)\")  \/\/ -100"],"syntax":"swift"},{"anchor":"Operators","type":"heading","level":2,"text":"Operators"},{"inlineContent":[{"text":"Parser operators (also called “combinators”) are methods defined on the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"text":" protocol that","type":"text"},{"text":" ","type":"text"},{"text":"return a parser. For example, the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)-4hsj5"},{"text":" operator is a method that returns","type":"text"},{"text":" ","type":"text"},{"text":"something called a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["extension Parser {","  public func map<NewOutput>(","    _ transform: @escaping (Output) -> NewOutput","  ) -> Parsers.Map<Self, NewOutput> {","    .init(upstream: self, transform: transform)","  }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"And "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map","isActive":true},{"type":"text","text":" is a dedicated type that implements the logic of the map operation. In"},{"type":"text","text":" "},{"type":"text","text":"particular, in runs the upstream parser and then transforms its output:"}],"type":"paragraph"},{"type":"codeListing","code":["extension Parsers {","  public struct Map<Upstream: Parser, NewOutput>: Parser {","    public let upstream: Upstream","    public let transform: (Upstream.Output) -> NewOutput","","    public func parse(_ input: inout Upstream.Input) rethrows -> NewOutput {","      self.transform(try self.upstream.parse(&input))","    }","  }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Types that conform to the "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"reference","isActive":true},{"type":"text","text":" protocol but are not constructed directly, and instead are"},{"type":"text","text":" "},{"type":"text","text":"constructed via operators, are housed in the "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","type":"reference","isActive":true},{"type":"text","text":" type. It’s just an empty enum that"},{"type":"text","text":" "},{"type":"text","text":"serves as a namespace for such parsers."}],"type":"paragraph"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design"},"seeAlsoSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"],"generated":true,"title":"Articles"}],"metadata":{"role":"article","modules":[{"name":"Parsing"}],"roleHeading":"Article","title":"Design"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"],["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"kind":"article","sections":[],"abstract":[{"text":"Learn how the library is designed, including its use of protocols, result builders and operators.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/design"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"url":"\/documentation\/parsing","type":"topic","kind":"symbol","title":"Parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","url":"\/documentation\/parsing\/errormessages","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn how the library reports parsing errors and how to integrate your own custom error messages"},{"type":"text","text":" "},{"text":"into parsers.","type":"text"}],"title":"Error Messages"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/map(_:)-4hsj5":{"title":"map(_:)","url":"\/documentation\/parsing\/parser\/map(_:)-4hsj5","kind":"symbol","abstract":[{"type":"text","text":"Returns a parser that transforms the output of this parser with a given closure."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)-4hsj5","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"map"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewOutput"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO3MapV","text":"Map"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol","title":"Parser","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Map":{"url":"\/documentation\/parsing\/parsers\/map","type":"topic","kind":"symbol","title":"Parsers.Map","navigatorTitle":[{"kind":"identifier","text":"Map"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Map"}],"abstract":[{"text":"A parser that transforms the output of another parser with a given closure.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","url":"\/documentation\/parsing\/gettingstarted","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn how to integrate Parsing into your project and write your first parser."}],"title":"Getting Started"},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","url":"\/documentation\/parsing\/stringabstractions","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"text":"trade performance for correctness where needed.","type":"text"}],"title":"String Abstractions"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","title":"OneOf","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}],"url":"\/documentation\/parsing\/oneof","type":"topic","role":"symbol","navigatorTitle":[{"text":"OneOf","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"url":"\/documentation\/parsing\/parsers","type":"topic","kind":"symbol","title":"Parsers","navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","url":"\/documentation\/parsing\/backtracking","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when"},{"type":"text","text":" "},{"text":"unnecessary.","type":"text"}],"title":"Backtracking"}}}