{"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse"]]},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"paths":["\/documentation\/parsing\/parse\/init(with:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"An entry point into ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","isActive":true,"type":"reference"},{"text":" syntax.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse\/init(with:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":" "},{"kind":"internalParam","text":"build"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":")"}],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"with","content":[{"inlineContent":[{"text":"A parser builder that will accumulate non-void outputs in a tuple.","type":"text"}],"type":"paragraph"}]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Used to combine the non-void outputs from multiple parsers into a single output by running"},{"type":"text","text":" "},{"type":"text","text":"each parser in sequence and bundling the results up into a tuple."}]},{"type":"paragraph","inlineContent":[{"text":"For example, the following parser parses a double, skips a comma, and then parses another","type":"text"},{"text":" ","type":"text"},{"text":"double before returning a tuple of each double.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let coordinate = Parse {","  Double.parser()","  \",\"","  Double.parser()","}","","try coordinate.parse(\"1,2\")  \/\/ (1.0, 2.0)"]}]}],"metadata":{"modules":[{"name":"Parsing"}],"role":"symbol","roleHeading":"Initializer","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":")","kind":"text"}],"symbolKind":"init","title":"init(with:)","externalID":"s:7Parsing5ParseV4withACyxGxyXE_tcfc"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parse/init(with:)":{"kind":"symbol","type":"topic","title":"init(with:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"with","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/parsing\/parse\/init(with:)","abstract":[{"text":"An entry point into ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","type":"reference","isActive":true},{"text":" syntax.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse\/init(with:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"url":"\/documentation\/parsing","type":"topic","kind":"symbol","title":"Parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"role":"symbol","title":"ParserBuilder","abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"type":"text","text":"runs a number of parsers, one after the other, and accumulates their outputs."}],"kind":"symbol","type":"topic","url":"\/documentation\/parsing\/parserbuilder","navigatorTitle":[{"kind":"identifier","text":"ParserBuilder"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserBuilder"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder"},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"url":"\/documentation\/parsing\/parse","title":"Parse","role":"symbol","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers to accumulate their outputs."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parse"}],"navigatorTitle":[{"kind":"identifier","text":"Parse"}],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol","title":"Parser","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}]}}}